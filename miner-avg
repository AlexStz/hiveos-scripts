#!/usr/bin/env bash

[ -t 1 ] && . colors

#DEBUG=true
MINER_LOG_PATH='/var/log/miner'
MINERS="$MINER_LOG_PATH/*"

declare -A SCRIPT=()
declare -A LOG=()
declare -A TABLE=()

SCRIPT[version]="2.7.1"
SCRIPT[name]="HiveOS miner log analyzer"
SCRIPT[author]="https://github.com/j2h4u"
SCRIPT[basename]="$(basename $0)"
SCRIPT[usage]="Usage: ${CYAN}${SCRIPT[basename]}${NOCOLOR}"

#
# miner markup definitions
#

#[18:17:54] INFO  - Selected algo: lyra2v3
#[16:34:45] INFO  - 1/0 Accepted : diff=0.5901 : 274.4MH/s
LOG[cryptodredge.algo]="Lyra2REv3"
LOG[cryptodredge.keyword]="Accepted : diff"
LOG[cryptodredge.position]="9"

# m 17:19:50 ethminer Speed 230.96 Mh/s gpu0 32.53 65C 30% 117W gpu1 24.97 66C 37% 75W gpu2 25.35 65C 70% 76W gpu3 23.61 65C 76% 76W gpu4 23.24 60C 30% 70W gpu5 23.66 66C 39% 91W gpu6 23.44 65C 59% 91W gpu7 24.27 65C 49% 67W gpu8 14.32 66C 34% gpu9 15.56 57C 30% A5 Time: 00:03
LOG[ethminer.algo]="Ethash"
LOG[ethminer.keyword]="Speed "
LOG[ethminer.position]="5"
#LOG[ethminer.unit]="mh/s"

#02.04.2019 21:26:17 INFO: Detected new work: 000001b3c51aeda5 [ZelProof]
#02.04.2019 21:26:33 Total speed: 302 Sol/s
LOG[ewbf.algo]="Zhash"
LOG[ewbf.keyword]=" Total speed: "
LOG[ewbf.position]="5"
LOG[ewbf.unit]="Sol/s"

#18:35:54 Total Speed: 132.9 Sol/s Shares Accepted: 14 Rejected: 0
LOG[gminer.algo]="Beam/Other"
LOG[gminer.keyword]=" Total Speed: "
LOG[gminer.position]="4"
LOG[gminer.unit]="Sol/s"

#LOG[nanominer.algo]="RandomHash"
#LOG[nanominer.keyword]="PascalCoin last 10 min"
##LOG[nanominer.keyword]="Monero last 10 min"
#LOG[nanominer.position]="NF-1" #can be awk built-in variable

#Miner 23:29:34   Speed : 10339 H/S (CPU 304 H/S)..
#LOG[rhminer.algo]="RandomHash"
#LOG[rhminer.keyword]=" Speed : "
#LOG[rhminer.position]="8"
#LOG[rhminer.unit]="H/s"

#20190324 18:18:43 Uptime: 16 secs | Algo: x16r | T-Rex v0.9.2
#20190322 10:20:34 [ OK ] 7521/7526 - 128.17 MH/s, 115ms
LOG[t-rex.algo]="X16r"
LOG[t-rex.keyword]="[ OK ]"
LOG[t-rex.position]="8"

#[2019-03-12 21:01:28] speed 10s/60s/15m 5532.0 5531.7 5232.7 H/s max 5533.2 H/s
LOG[xmrig-nvidia.algo]="CryptoNight"
LOG[xmrig-nvidia.keyword]="10s/60s/15m"
LOG[xmrig-nvidia.position]="7"
LOG[xmrig-nvidia.unit]="kH/s"

#
# colors
#

TABLE[border.color]="${DGRAY}"
TABLE[ordinary.color]="${NOCOLOR}"
TABLE[fade.color]="${DGRAY}"
TABLE[header.color]="${CYAN}"
TABLE[footer.color]="${WHITE}"
TABLE[ok.color]="${GREEN}"
TABLE[accent.color]="${BGREEN}"
TABLE[error.color]="${BRED}"
TABLE[border.letter]="|"

#
# functions
#

function directoryExist {
	[ -d "$1" ]
}

function fileExist {
	[ -f "$1" ]
}

function variableExist {
	[ ! -z "$1" ]
}

function reportError {
	(
	echo -e "${TABLE[error.color]}ERROR:${NOCOLOR} $*"
	local frame=0
	while (echo -n "       "; caller $frame); do
		((frame++));
	done
	echo
	) >&2
}

function die {
	reportError "$*"
	exit 1
}

function checkDataset {
	#
	# check dataset for persistence
	# usage: checkDataset dataset[property]
	#
	if ! variableExist "$1"; then
		die "No argument given. Exiting..."
	elif ! variableExist "${!1}"; then
		die "Dataset \"$1\" not found. Exiting..."
	fi
}

function stripColors {
	#
	# strip ESC sequences from dataset
	# usage: stripColors dataset[property]
	#
	checkDataset "$1"
	read -d '' "$1" < <(sed "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g" <<< "${!1}")
}

function stripLettersAndNormalizeScale {
	#
	# strip letters from dataset and normalize hashrate scale
	# usage: stripLettersAndNormalizeScale dataset[property]
	#
	checkDataset "$1"
	local DEBUG=
	read -d '' "$1" < <(
		awk '
			BEGIN {
				# holy shit, it wasnt intended to be such bigass awk script
				DEBUG="'"$DEBUG"'"
				miner_unit="'"${LOG[$MINER.unit]}"'"
				if (! miner_unit) miner_unit="mhs" # assume mh/s as default
				units["sols"]=1
				units["gs"]=1
				units["hs"]=1
				units["khs"]=1000
				units["mhs"]=1000000
			}
			{
				dirty_hashrate=$('${LOG[$MINER.position]}')
				reported_hashrate=dirty_hashrate+0

				# in case hashrate and reported_unit glued together like 100MH/S, we separate them
				if (dirty_hashrate != reported_hashrate) {
					reported_unit=dirty_hashrate
					sub(reported_hashrate,"",reported_unit)
					}
				else
					reported_unit=$('${LOG[$MINER.position]}'+1)

				# remove all but [[:alpha:]]
				gsub(/[^a-zA-Z]+/, "", reported_unit)
				gsub(/[^a-zA-Z]+/, "", miner_unit)

				# scale reported_hashrate down to h/s...
				for (unit in units) 
					if (tolower(reported_unit) == unit) {
						normalized_hashrate=reported_hashrate*units[unit]
						continue
						}

				# ...and back to miner units
				for (unit in units)
					if (tolower(miner_unit) == unit) {
						hashrate=normalized_hashrate/units[unit]
						continue
						}

				# beware: zero hashrates do included in dataset
				if (DEBUG)
					print hashrate, miner_unit, "and old is", reported_hashrate, reported_unit
				else
					print hashrate

			}' <<< "${!1}")
}

function getStatsOf {
	#
	# usage: getStatsOf dataset[property]
	#
	checkDataset "$1"

	# cut last char (closing bracket)
	local PARENT_DATASET="${1: : -1}"
	declare -g -i "${PARENT_DATASET}.length]"=0
	declare -g -i "${PARENT_DATASET}.min]"=0
	declare -g -i "${PARENT_DATASET}.max]"=0
	declare -g -i "${PARENT_DATASET}.average]"=0
	declare -g -i "${PARENT_DATASET}.median]"=0

	case "${!1}" in
		"")
			# dataset not defined
			if variableExist "$DEBUG"; then reportError "\"$1\" not defined. Skipping..."; fi
			return 1
			;;
		$'\n'*)
			# dataset is empty
			if variableExist "$DEBUG"; then reportError "\"$1\" is empty. Skipping..."; fi
			return 1
			;;
		"0")
			# dataset is null
			if variableExist "$DEBUG"; then reportError "\"$1\" has null value. Skipping..."; fi
			return 1
			;;
		*)
			declare -g "${PARENT_DATASET}.length]"=$(jq --slurp length <<< "${!1}")
			declare -g "${PARENT_DATASET}.min]"=$(jq --slurp min <<< "${!1}")
			declare -g "${PARENT_DATASET}.max]"=$(jq --slurp max <<< "${!1}")
			declare -g "${PARENT_DATASET}.average]"=$(jq --slurp add/length <<< "${!1}")
			declare -g "${PARENT_DATASET}.median]"=$(
				sort --numeric-sort <<< "${!1}" |
					awk '
						{
							array[NR]=$1
						}
						END \
						{
							middle_index=NR/2
							print (NR % 2 == 1) ? array[int(middle_index)+1] : (array[middle_index] + array[middle_index+1])/2
						}'
				)
			;;
	esac
}

function printf8 {
	#
	# print number of any scale to 8 symbols exactly
	#

	local input_number="$1"
	if ! variableExist "$input_number"; then
		# should be printf "        ", but I'd like to see the wrong case immediately
		printf 'empty.--'
		return
	fi

	# bash aint' got no floating arithmetics
	# at first we ceil that number
	scale_indicator=$(
		awk '{ printf("%d", ($1 += $1<=0 ? 0 : 0.99999999) * 100) }' <<< "$input_number")

	# ...then choose suitable template
	if [[ $scale_indicator -eq 0 ]]; then
			printf '%8.2f' "$input_number" # template "    0.00"
		elif [[ $scale_indicator -le 100 ]]; then
				printf '%8.6f' "$input_number" # template 9.999999
			elif [[ $scale_indicator -le 1000000 ]]; then
				printf '%8.2f' "$input_number" # template 99999.99
				elif [[ $scale_indicator -le 100000000 ]]; then 
					printf '%8.0f' "$input_number" # template 99999999
	else
		# template 9.99e-99
		printf '%8.2e' "$input_number"
	fi
}

function printCuteHeader {
	if variableExist "${LOG[$MINER.algo]}"; then
		local ALGO="(${LOG[$MINER.algo]})"
	fi
	
	printf "${TABLE[border.color]}|${NOCOLOR}";		printf " ${TABLE[accent.color]}%-30.30s${NOCOLOR} " "$MINER $ALGO"
													printf " ${TABLE[header.color]}%5.5s${NOCOLOR} " "date"
	printf "${TABLE[border.color]}|${NOCOLOR}";		printf " ${TABLE[header.color]}%8.8s${NOCOLOR} " "values"
	printf "${TABLE[border.color]}|${NOCOLOR}";		printf " ${TABLE[header.color]}%8.8s${NOCOLOR} " "min"
	printf " ";										printf " ${TABLE[header.color]}%8.8s${NOCOLOR} " "max"
	printf "${TABLE[border.color]}|${NOCOLOR}";		printf " ${TABLE[header.color]}%8.8s${NOCOLOR} " "average"
	printf "${TABLE[border.color]}|${NOCOLOR}";		printf " ${TABLE[header.color]}%8.8s${NOCOLOR} " "median"
	printf "${TABLE[border.color]}|${NOCOLOR}"
	printf "\n"
}

function printCuteBody {
	printf "${TABLE[border.color]}| ${NOCOLOR}";		printf "%8u" "${DATASET[current.length]}"
	printf "${TABLE[border.color]} | ${NOCOLOR}";		printf8 "${DATASET[current.min]}"
	printf "${TABLE[border.color]} - ${NOCOLOR}";		printf8 "${DATASET[current.max]}"
	printf "${TABLE[border.color]} | ${NOCOLOR}";		printf8 "${DATASET[current.average]}"
	printf "${TABLE[border.color]} | ${NOCOLOR}";		printf8 "${DATASET[current.median]}"
	printf "${TABLE[border.color]} | ${NOCOLOR}"
	# print algo and intensity, if any
	printf "${TABLE[border.color]}%s %s${NOCOLOR}" "${DATASET[current.algo]}" "${DATASET[current.intensity]}"
	printf "\n"
}

function printCuteFooter {
	printf "${TABLE[footer.color]}"
	printf "                                          ";	printf "%8u" "${DATASET[totals.length]}"
	printf "   ";											printf8 "${DATASET[totals.min]}"
	printf "   ";											printf8 "${DATASET[totals.max]}"
	printf "   ";											printf8 "${DATASET[totals.average]}"
	printf "   ";											printf8 "${DATASET[totals.median]}"
															printf " %s" "${LOG[$MINER.unit]}"
	printf "${NOCOLOR}\n\n"
}

function printCuteDebug {
	local DEBUG_LINES=12
	checkDataset "$1"
	echo
	echo
	echo -e "${TABLE[header.color]}LOG:${NOCOLOR} ${TABLE[accent.color]}\"${NOCOLOR}$FILE${TABLE[accent.color]}\"${NOCOLOR}, ${TABLE[header.color]}$1:${NOCOLOR}"
	echo -e -n "${TABLE[accent.color]}\"${NOCOLOR}"
	echo -e -n "${!1}" | head --lines="$DEBUG_LINES" # | head --bytes=-1 # exclude last "\n"
	echo -e "${TABLE[accent.color]}\"${NOCOLOR}"
	read -rsp $'Press any key to continue...' -n 1 key
}

function minerStats {
	local -r MINER="$1"
	local -A DATASET=()

	# is miner defined?
	if ! variableExist "${LOG[$MINER.keyword]}" || ! variableExist "${LOG[$MINER.position]}"; then
		if variableExist "$DEBUG"; then reportError "Keyword or position for miner \"$MINER\" are not defined. Skipping..."; fi
		return 1
	fi

	local -r MINER_LOGS="$MINER_LOG_PATH/$MINER/$MINER*.log"
	local -r -i MINER_LOGS_NUMBER=$(shopt -s nullglob; set -- $MINER_LOGS; echo $#)

	echo -e -n "${TABLE[accent.color]}   $MINER (${LOG[$MINER.algo]})${NOCOLOR}: processing $MINER_LOGS... "

	if [[ $MINER_LOGS_NUMBER -gt 0 ]]; then
		echo -e -n "\r"
	else
		echo -e "No logs found.\n"
		return 1
	fi

	printCuteHeader

	for FILE in $(ls --sort=time --reverse $MINER_LOGS); do

		# print log name
		printf "${TABLE[border.color]}|${NOCOLOR}"
		printf " %-18.18s " "$(basename $FILE)"
		printf "${TABLE[border.color]}|${NOCOLOR}"

		# print date, mark current date with ">"
		local FILE_DATE_TIME=$(date --reference=$FILE "+%F %R")
		local FILE_DATE=$(date --reference=$FILE "+%F")
		local TODAY=$(date "+%F")

		if [[ $FILE_DATE == $TODAY ]]; then
			printf "${TABLE[ok.color]}>${NOCOLOR}"
		else
			printf ' '
		fi

		# print mtime
		printf '%16.16s ' "$(date --reference=$FILE "+%F %R")"

		# get all lines with KEYWORD
		DATASET[current]=$(grep --fixed-strings "${LOG[$MINER.keyword]}" "$FILE")
		DATASET[current.isEmpty]="$?"

		# extract algo
		DATASET[current.algo]=$(
			grep --max-count=1 --only-matching --perl-regexp "[Aa][Ll][Gg][Oo].\s+\K\w+" "$FILE")

		# extract intensity (t-rex)
		DATASET[current.intensity]=$(
			grep --max-count=1 --only-matching --perl-regexp "intensity set to\s+\K\w+" "$FILE")

		# skip current file in case there're no useful data. print empty line.
		if [[ ${DATASET[current.isEmpty]} != 0 ]]; then
			printf "${TABLE[border.color]}|${NOCOLOR}"
			printf ' %8u ' 0
			printf "${TABLE[border.color]}|          -          |          |          | %s${NOCOLOR}" "${DATASET[current.algo]}"
			printf '\n'
			continue
		fi

		if variableExist "$DEBUG"; then printCuteDebug 'DATASET[current]'; fi

		stripColors 'DATASET[current]'
		if variableExist "$DEBUG"; then printCuteDebug 'DATASET[current]'; fi

		stripLettersAndNormalizeScale 'DATASET[current]'
		if variableExist "$DEBUG"; then printCuteDebug 'DATASET[current]'; fi

		# add dataset to totals
		if ! variableExist "${DATASET[totals]}"; then
			DATASET[totals]="${DATASET[current]}"
		else
			DATASET[totals]+=$'\n'"${DATASET[current]}"
		fi
		if variableExist "$DEBUG"; then printCuteDebug 'DATASET[totals]'; fi

		# get stats from current dataset then print
		getStatsOf 'DATASET[current]' &&
		printCuteBody
	done

	# get stats from totals dataset then print
	getStatsOf 'DATASET[totals]' &&
	printCuteFooter
}

function printVersion {
	echo -e "${CYAN}${SCRIPT[name]} by ${SCRIPT[author]}, version ${SCRIPT[version]}${NOCOLOR}"
	echo
}


#
# here comes main body
#

printVersion

echo -n -e "Logs at $MINER_LOG_PATH: "

# is main log directory exist?
if ! directoryExist $MINER_LOG_PATH; then
	echo "directory not found, exiting..."
	exit 1
fi

# is miners directories exist?
if ! directoryExist $MINERS; then
	echo "sub-directories not found, exiting..."
	exit 1
fi

# enumerate and print all log sub-dirs, do highlight known
while IFS=$'\n'; do
	for MINER in $(basename --multiple $MINERS); do
		if variableExist "${LOG[$MINER.keyword]}" && variableExist "${LOG[$MINER.position]}"; then
			echo -e -n "${TABLE[accent.color]}"
		else
			echo -e -n "${TABLE[fade.color]}"
		fi
		echo -e -n "${MINER}${NOCOLOR}  "
	done

	echo
	echo

	for MINER in $(basename --multiple $MINERS); do
		minerStats "$MINER"
	done

	break
done
